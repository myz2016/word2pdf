<?xml version="1.0" encoding="UTF-8"?>
<!-- configuration 节点属性
scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug： 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
 -->
<configuration scan="true">

    <!--
        设置变量： <property>
        用来定义变量值的标签，<property> 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。
        通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。
    -->
    <property name="appName" value="word2pdf-admin"/>

    <!--
        <appender>：
        <appender>是<configuration>的子节点，是负责写日志的组件。
        <appender>有两个必要属性name和class。name指定appender名称，class指定appender的全限定名。
    -->

    <!--
        ConsoleAppender:
        把日志添加到控制台，有以下子节点：
        <encoder>：对日志进行格式化。（具体参数稍后讲解 ）
        <target>：字符串 System.out 或者 System.err ，默认 System.out ；
    -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] [%level] [%class:%line] - %m %n</pattern>
        </encoder>
    </appender>

    <!--
        RollingFileAppender:
        滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：
        <file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
        <append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
        <encoder>：对记录事件进行格式化。
        <rollingPolicy>:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。
        <triggeringPolicy >: 告知 RollingFileAppender 合适激活滚动。
    -->
    <!--fileInfoLog ==> 把Info信息记录到file的appender -->
    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>./log/info.${appName}.log</file>
        <encoder>
            <charset>UTF-8</charset>
            <!--
                %m 输出代码中指定的消息
                %n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
            -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] [%level] [%class:%line] - %m %n</pattern>
        </encoder>
        <!-- 推荐使用新版本提供的SizeAndTimeBasedRollingPolicy，这样就不用写triggeringPolicy，这个类强制要求%d和%i-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- daily rollover 每天滚动并压缩-->
            <!--
                <fileNamePattern>:
                    必要节点，包含文件名及“%d”转换符，“%d”可以包含一个 java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。
                    如果直接使用 %d，默认格式是 yyyy-MM-dd。
                <maxHistory>:
            -->
            <fileNamePattern>./log/info.${appName}.%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>
            <maxHistory>30</maxHistory>
            <maxFileSize>10MB</maxFileSize>
        </rollingPolicy>
    </appender>

    <!--fileErrorLog ==> 把Error信息记录到file的appender -->
    <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>./log/error.${appName}.log</file>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] [%level] [%class:%line] - %m %n</pattern>
        </encoder>
        <!--
            <level>:设置过滤级别
            <onMatch>:用于配置符合过滤条件的操作
            <onMismatch>:用于配置不符合过滤条件的操作
        -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>./log/error.${appName}.%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>
            <maxHistory>30</maxHistory>
            <maxFileSize>10MB</maxFileSize>
        </rollingPolicy>
    </appender>


    <appender name="mylog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>./log/mylog.${appName}.log</file>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] [%level] [%class:%line] - %m %n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>./log/mylog.${appName}.%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>
            <maxHistory>30</maxHistory>
            <maxFileSize>10MB</maxFileSize>
        </rollingPolicy>
    </appender>


    <!--
        用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
        <logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
        name:
        用来指定受此loger约束的某一个包或者具体的某一个类。
        level:
        用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
        如果未设置此属性，那么当前loger将会继承上级的级别。
        addtivity:
        是否向上级loger传递打印信息。默认是true。
    -->
    <!--
        这里增加一个专门的Warn文件，专门记录WarnLog类的信息，并且这个appender不放入root-appender之中
        用于模拟今后专门把SQL写到单独文件的场景
    -->
    <logger name="com.fotic" level="WARN" additivity="true">
        <appender-ref ref="mylog"/>
    </logger>

    <!--
    <root>
        也是<loger>元素，但是它是根loger。只有一个level属性，应为已经被命名为"root".
        level:
        用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
        默认是DEBUG。
        <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger
    -->
    <root level="INFO">
        <appender-ref ref="fileInfoLog"/>
        <appender-ref ref="fileErrorLog"/>
        <appender-ref ref="STDOUT"/>
    </root>
</configuration>
